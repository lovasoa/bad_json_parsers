matrix:
  include:
    - language: perl
      perl: 5.30
      install: "/bin/true"
      script: ./test_parser.sh perl parser_perl.pl

    - language: python
      python: 3.8
      script: ./test_parser.sh python parser_python.py

    - language: ruby
      script: ./test_parser.sh ruby parser_ruby.rb

    - language: csharp
      mono: none
      dotnet: 3.0
      script: ./test_parser.sh dotnet run -p parser_dotnet
  
    - language: java
      jdk: openjdk12
      script:
        - mvn -f parser-java-jackson/pom.xml clean install -DskipTests
        - ./test_parser.sh java -jar parser-java-jackson/target/bad-parser-jackson-1.0-SNAPSHOT.jar
      cache:
        directories:
          - $HOME/.m2

    - language: node_js
      node_js: "8"
      script: ./test_parser.sh node parser_javascript.js

    - language: go
      install: go build parser_go.go
      script: ./test_parser.sh ./parser_go

    - language: csharp
      mono: none
      dotnet: 3.0
      script: ./test_parser.sh 'dotnet run -p parser_dotnet_system_text_json'

    - language: c
      install: sudo apt-get -y install libjansson-dev
      script:
       - cd parser_c_jansson && make && cd ..
       - ./test_parser.sh ./parser_c_jansson/parser_c_jansson

    - language: cpp
      script:
       - cd parser_cpp && curl https://github.com/nlohmann/json/releases/download/v3.7.2/json.hpp -L -O && cd ..
       - cd parser_cpp && g++ -std=c++11 -O3 -flto -DNDEBUG parser_cpp.cpp -o parser_cpp && cd ..
       - ./test_parser.sh ./parser_cpp/parser_cpp
 
    - language: php
      php: "7.1"
      script: ./test_parser.sh php ./parser_php.php

    - language: rust
      install: cd parser_rust && cargo build --release && cd ..
      script: ./test_parser.sh ./parser_rust/target/release/parser_rust

    - language: minimal
      env: LANG=OCAML OPAMYES=true
      install:
        - sudo apt-get -y install ocaml ocaml-native-compilers camlp4-extra opam
        - opam init --auto-setup
        - eval $(opam config env)
        - opam install --yes yojson ocamlfind
        - cd parser_ocaml_yojson && make && cd ..
      script: ./test_parser.sh ./parser_ocaml_yojson/parser_ocaml

    # nim
    - language: minimal
      env: LANG=NIM
      install:
        - export CHOOSENIM_NO_ANALYTICS=1
        - curl https://nim-lang.org/choosenim/init.sh -sSf > init.sh
        - sh init.sh -y
        - export PATH=~/.nimble/bin:$PATH
        - echo "export PATH=~/.nimble/bin:$PATH" >> ~/.profile
        - choosenim stable
      script:
        - nim c -d:release parser_nim.nim
        - ./test_parser.sh ./parser_nim

    - language: d
      install: dmd parser_d.d
      script: ./test_parser.sh ./parser_d

    - language: elixir
      elixir: 1.9.0
      install: 
        - cd parser_elixir
      script:
        - mix local.hex --force
        - mix deps.get
        - mix escript.build
        - cd ..
        - ./test_parser.sh ./parser_elixir/parser_elixir
